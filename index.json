[{"categories":["运行日志"],"content":"十年前接触到了 Github，当时主要就是为了搭建自己的免费博客(以至于随便起了个中二的 ID ・(´ ー `) · )，以记录学习过程中的心得，当时最火的方案毫无疑问是 Hexo + NexT 主题，上学期间对什么对感兴趣，也有时间去研究，写了不少乱七八糟的东西，虽不说有多少精品，数量上几百篇应该是够的。 虽然最近几年写的东西越来越少，时间精力确实大不如之前，不是没东西可写而是写一篇长文太耗费时间精力了，一些几句话能说明白的也不屑于形成一篇博客，都放在我的 BBS/Memo 里记录存档了。 还有一个关键是文章多了之后 Hexo 编译一次太慢了，NexT 的原作者早就退坑，现在看旧博客 有种年久失修的苍老感。 搭建新博客这个想法已经很久很久了，一直在拖延，这两天有时间搞了一下，其实一旦开了头进入状态了还是很不错的一件事。 新博客使用的是 Hugo，基于 Go 的一个静态网站工具，彻底解决 Hexo 编译慢的问题，当然它的可玩性和资源可能不如 Hexo，毕竟我也过了折腾的年纪。 昨天把旧博客的一些配置迁移到了新项目，目前也算是比较满意了，文章的话现在还不打算迁移过来，等我哪天有空挑一下把有用的搞过来，剩下的就保持原样吧。 ","date":"2025-07-20","objectID":"/%E8%BF%81%E7%A7%BB%E5%85%AC%E5%91%8A/:0:0","series":null,"tags":null,"title":"迁移公告","uri":"/%E8%BF%81%E7%A7%BB%E5%85%AC%E5%91%8A/#"},{"categories":["开发日志"],"content":"如果经常需要在各种开发项目之间切换，而这些项目又各自需要不同的运行环境，尤其是不同的运行时版本或依赖库，那么没有一个环境管理工具就会变得特别混乱。 作为一个主业 Java 方向的，看到 Node.js/Python 的包管理，真的是头大，处理版本问题那是小心翼翼，轻易不敢升级，一不小心就跑不起来了。。。 后来接触到有一些管理软件可以快速切换版本，但是每一种语言装一个还是有点麻烦，毕竟像我这样同时有多个语言环境需求的肯定不在少数，每一个工具都是学习成本； 后来我发现有一种多语言环境管理工具，可以把各个语言统一管理，并且他们之间的配置文件大多能兼容，这个就是我推荐的，放在最后。 ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:0:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#"},{"categories":["开发日志"],"content":" Node.js前端（当然也能做后端了）我只能说发展太快了，我这种非专业的根本追不上，各种新工具层出不穷，JS 的高度灵活性真是能玩出花，node 的各个版本也有一定的差异，官方包管理 npm 也有一些历史问题被人疯狂吐槽，现在我知道的比较出名的代替是： Yarn 并行下载安装，在大型项目中使用更可靠的锁定文件. pnpm 通过内容寻址来去除重复依赖，节省磁盘空间，加速安装. 当然这玩意发展太快，现在又出现了什么新工具我就不了解了。 而 node 版本的管理，我认为比较有名的有这几个： nvm 基于 shell 脚本的 Node.js 版本管理工具，老牌，广为人知和功能全面 n 基于 npm 的 Node.js 版本管理工具，以其简洁的命令行界面和快速的安装、切换速度著称 fnm 基于 Rust 编写的 Node.js 版本管理工具，以其极快的速度和跨平台支持而闻名 这些工具的具体使用方法就不展开说了，基本都差不多，毕竟我觉得现在有了更好的方案。 让我最难受的大概是每个项目依赖都要在当前文件夹安装一遍，嵌套可能还深不见底，Windows 下压缩打包都不一定能打包的了；到现在还能看到开发一个 app 100kb，安装的依赖 10G 的地狱笑话 haha ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:1:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#nodejs"},{"categories":["开发日志"],"content":" Python个人感觉它的包管理和 Node.js 的 npm 真的挺类似的，py 官方的包管理是 pip，也经常被吐槽慢，也同样存在依赖库版本兼容问题，并且还有 python2/python3 的兼容问题，虽然现在基本都是 py3 的天下了。 在介绍版本环境控制之前，先介绍两个好用的工具，我使用的是 virtualenv 来做环境管理隔离，如果用的是 fish 的话要用 VirtualFish；而 uv 则是解决 pip 依赖安装速度等问题；再搭配版本管理工具基本就能满足大部分需求了。 VirtualFish 的一些基本使用方法： sh # 创建新环境 vf new name # 激活环境 vf activate name # 退出环境 vf deactivate # 删除环境 vf rm name # 查看环境 vf ls # 启用自动激活 vf auto enable uv 的一些基本使用方法： sh # 安装单个包（比 pip 快的多） uv pip install requests uv pip list uv pip list --outdated # 查看更新包 # 全局生效 uv pip install --system pandas 当然如果是非编程方向，例如数据分析方向，uv 未必合适，可能还是 conda 更合适一些，python 的生态真的太割裂了，conda 也被吐槽的很厉害，或者可以尝试一下 miniconda 或者 pixi VirtualFish 和 uv 这类工具完全可以并且通常推荐和版本管理工具搭配使用，毕竟他们解决的不是一类问题。 ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:2:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#python"},{"categories":["开发日志"],"content":" JavaJava 生态我感觉相比之下还是要好得多，maven/gradle 下大部分的库都是可以向下兼容的，从 JDK8 之后 JDK 的向下兼容会差一些，毕竟放弃历史包袱也是为了更快的适应时代潮流。 对于 JDK 版本管理问题，推荐 sdkman，它在 MacOS/Linux 下体验还是不错的，是一个 CLI 工具，可以比较方便的切换、安装不同发行版的 OpenJDK 版本。 也支持安装一些 Java 生态的常用工具，感兴趣的可以看看使用手册。 sh # 安装 cli，查看版本 curl -s \"https://get.sdkman.io\" | bash sdk version # 安装 JDK，默认 tem sdk install java # 指定版本 sdk install scala 3.4.2 # 卸载 sdk uninstall scala 3.4.2 # 搜索查看可安装的发行版 sdk list java # 使用 sdk use scala 3.4.2 sdk default scala 3.4.2 sdk current java ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:3:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#java"},{"categories":["开发日志"],"content":" OpenJDK 发行版选择自从 Java8 之后 Oracle 的骚操作，官方版本的 JDK 肯定是不推荐的，能用得起的企业也没多少吧。 主要的发行版有： Oracle OpenJDK Adoptium (Eclipse Temurin) Amazon Corretto Red Hat build of OpenJDK BellSoft Liberica JDK Azul Zulu Alibaba Dragonwell … 其他的华为、腾讯都有自己的发行版，他们这些云计算厂商都是根据自己的平台优化过的，所以除非绑定平台可以尝试，要不然还是用一些通用的吧。 说结论，Liberica JDK 与 AdoptOpenJDK（现已更名为 Eclipse Temurin）可能是最佳的选择。 Liberica 是 Spring 官方推荐的发行版，我了解了下 BellSoft 这家公司，是一家专注于 Java 技术的公司，是 OpenJDK 的主要贡献者之一，根据场景有不同的版本，例如 Lite 版本是容器优化，Standard 日常开发，Full 可以 Fx 等 GUI 的开发。 它家我看还有对 Java App 特别优化的 Linux 容器 Alpaquita，有空我也可以尝试下。 而 Eclipse Temurin 原名 AdoptOpenJDK 就不用说了，Eclipse 社区出品不会有太大问题，优点和缺点都是一个，社区驱动嘛，有舍有得，sdkman 默认的就是 Temurin。 我之前一直使用的是 AdoptOpenJDK，现在打算切换到 Liberica 试试。 ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:3:1","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#openjdk-发行版选择"},{"categories":["开发日志"],"content":" 通用版本管理推荐上，个人的排序是 mise \u003e vfox \u003e asdf 这一类工具一般都会把版本信息保存在项目目录下的一个配置文件中，这样除了工具可以识别当前环境信息，还可以在项目中共享这些信息，确保团队中的每个人都使用相同的工具版本。 sh # mise exec/x 虽然非常适合运行一次性命令，但激活 mise 会更加方便。 mise exec node@22 -- node -v # mise node@22.14.0 ✓ installed # v22.14.0 mise x python@3.12 -- ./myscript.py # 没有特殊说明，配置仅对当前目录生效 mise use --global node@lts mise ls mise use node@23 pnpm@10 # 仅安装，不激活 mise install node mise cache clear mise ls-remote node # 查看所有可用的插件 mise plugins list-all # 安装插件（比如要使用 node） mise plugins add node # 查看已安装的插件 mise plugins ls # 查看已安装的版本 mise ls node mise ls mise use node@lts # 设置环境变量 mise set NODE_ENV=development # 查看当前配置 mise settings mise 的安装参考文档 mise 兼容 asdf 等环境管理软件的配置，并且因为 mise 的设计灵感源自 asdf，老版本兼容 asdf 的插件系统，但是现在并不推荐；速度比 asdf 快的多。 他们两个的配置文件包括下文的 vfox 都是可以互相识别的。 vfox 和 asdf 差不多，也是通过安装插件来实现各种功能。 sh # 查看所有插件 vfox available # 添加插件 vfox add nodejs # 安装 vfox install nodejs@latest vfox install nodejs@21.5.0 vfox search nodejs # 全局生效 vfox use -g nodejs # 临时 session/当前终端生效 vfox use -s nodejs ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:4:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#通用版本管理"},{"categories":["计算机"],"content":"最近想用虚拟机装个 XP/7 怀旧一下老游戏，没想到遇到这么多问题。。。 首先我现在用的是 Win11 系统，除了家庭版，其他都是默认开启 Hyper-V 和 WSL2 的，既然 VM 现在免费了，那么我当然优先考虑使用 VM 来装。 话说现在博通收购 VM 以后，虽然免费了，但是下载是真难下，需要注册个账号，官网现在也乱的很，也许之后慢慢会正常吧，放一个下载地址 安装 VM 的时候默认它会出一个提示，反正意思就是和 Hyper-V 冲突，使用他们的兼容模式，如果没有，那说明你没有开启 Hyper-V。 Hyper-V 是微软的虚拟化平台，也可以说是 Windows 自带的虚拟机，类似 Win7 时代的 Virtual PC，类比 ESXi 和 KVM 这些，本来是给服务器用的。 Hyper-V 它是 type-1 类型，直接在硬件层运行，可以理解为是你电脑上跑了个 Hyper-V 然后它虚拟出来了个 Win11 系统给你用，如果你新建一个虚拟机，那么这个虚拟机和宿主机 Win11 是同级别的，共享硬件，尤其是显卡共享就简单了； 所以 Hyper-V 的性能会比较高；但是同时也有人指出这样宿主机的游戏性能会降低，但是一般人应该感觉不出来。 但是话说回来，Hyper-V 毕竟是微软搞的，如果想虚拟个 Linux 或者其他非 Win 的系统可能就不是那么好用了，易用性也不如 VM。 Hyper-V 我也测试过虚拟个 XP，效果也不是很好，可能微软已经放弃对老系统的支持了吧，并且确实不如 VM 顺手。 VMware Workstation Pro 以及 VirtualBox 这类软件是采用的 VT 虚拟化技术，某些场景下可能是个更好的选择。 VM 现在虽然可以和 Hyper-V 共存，但是我实际使用下来感觉不太行，尤其是虚拟 XP 更是非常的卡。 ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:0:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#"},{"categories":["计算机"],"content":" 卡顿问题装完 XP 后感觉非常卡顿，声音也断断续续，看了下 Win10 应该还好，Win11 尤其严重； 既然知道了 Hyper-V 的原理，我也有考虑是 VT 和 Hyper-V 的兼容性问题，当然也有人说和 VM 的版本有关系，我换过 VM16、VM15，效果是有的，但是不明显。 于是我决定关闭 Hyper-V 和 WSL，毕竟这俩我用的也不多，非要用还是直接 VM 虚拟一台 Linux 或者直接用家里的 PVE 上的 Ubuntu 吧。 折腾到后来才发现一个问题，Win 下的 Docker 现在是依赖 Hyper-V 的，如果把 Hyper-V 关了就没法用 Docker 了，于是来来回回折腾了好几次。 后来看到有网友说即使是 Win11，与 Docker 的兼容性还是不好，默认都会把数据、镜像啥的塞到 C 盘，性能占用也很大（有老哥说 Hyper-V 虚拟机不限制内存的话默认是有多少吃多少，这个我没有求证） 最后我还是决定关掉 Hyper-V，一来 Hyper-V 虚拟机我确实用着不顺手，即使使用三方 NanaBox 类似的软件管理也还是不习惯，性能对我来说倒是其次的。 Docker 的问题可以虚拟一个 Debian 来搞，或者家里有 PVE 的话这个其实也省了。 ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:1:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#卡顿问题"},{"categories":["计算机"],"content":" 关闭 Hyper-V首先我还是建议先去 Win 的安全中心里的防护里把内存隔离关了，我觉得用处不大，可能还影响性能； 听老哥说如果开着防护像国内腾讯、网易的游戏进行作弊扫描的时候也是改不了内存的，有的游戏可能会强制你关掉才能进；亦或者有的防作弊检测还会扫盘，这个真是有点恶心人，题外话了。 另外一个是使用各种安卓模拟器的时候可能也会和 Hyper-V 冲突，所以索性给关掉吧。 检查 VT 状态可以使用 CPU-V 来查看。 找到 控制面板→程序→启用或关闭 Windows 功能，然后关闭 “Hype-V”、“Windows 虚拟机监控程序平台”、“适用于 Linux 的 Windows 子系统” 和 “虚拟机平台” 这几项，然后重启。 这时候再看应该就没有 Hyper-V 选项了，然后右键此电脑→管理→服务和应用程序→服务，往下翻，将如图所示有 Hyper-V 字样的服务全部禁用。 如果效果还是不好，可以打开 PoweShell 执行 shell bcdedit /set hypervisorlaunchtype off 还是不行的话就使用 bat 脚本强制卸载掉 bat Dism /online /disable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL pushd \u0026quot;%~dp0\u0026quot; dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum \u0026gt;hyper-v.txt for /f %%i in (\u0026#39;findstr /i . hyper-v.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /remove-package:\u0026quot;%SystemRoot%\\servicing\\Packages\\%%i\u0026quot; del hyper-v.txt ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:2:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#关闭-hyper-v"},{"categories":["计算机"],"content":" 后记关闭 Hyper-V 后，我下载了最新的 VM 进行重装，目前现在一切正常，感觉不到卡顿了，另外我又下载了一个 Debian 的镜像给装到了 VM 里面，并且安装了 Docker 和 Portainer，使用上也没什么问题，暂时就先这样。 如果效果再不好我还打算下个 VirtualBox 来试试的，目前看来是用不上了。 ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:3:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#后记"},{"categories":null,"content":" 感觉自己萌萌哒 收集一些自己常用的资源站，不在多而在于精，理想条件下是一个网站解决所有需求，再加一个备用。 并不想做成一个导航。 关于学习资源，奈何囊中羞涩，一些软件的定价过于离谱，基本都转向了订阅制，用学习版也是迫不得已。 根据目前的体验，MacOS 的资源是最简单获取的，Windows 是最难的，一些热门软件 DMCA 太严重了（俄罗斯的网站相对宽松），例如 Navicat、IDM，Android 的资源还可以，iOS 没啥必要，自签也只能解决一小部分。 缓慢整理中 也许会忘记也说不定呢. ","date":"2025-07-20","objectID":"/resources/:0:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#"},{"categories":null,"content":" Windows/综合 4 分贝 🎉 可以说是 423 down 完美替代 佛系软件 Adobe 源头 下载安装推荐使用 Adobe Downloader 或者还可以看看 GenP 这个项目 cybermania filecr 特殊的一些软件，NavicatPremium 参考这篇大佬的博客； Jetbrains 全家桶优先使用 IPFS，或者使用热心网友制作的 jetbra-free，带 Web GUI 可破插件（插件不成功可使用 plugin-privacy 解决），架设服务器参考这个频道；无论哪一种，源头貌似都是来源始皇的 ja-netfilter，不得不说 NB。 ","date":"2025-07-20","objectID":"/resources/:1:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#windows综合"},{"categories":null,"content":" MacOS MacKed 🎉 秋佬的 CoreInject 🎉 appstorrent torrentmac ","date":"2025-07-20","objectID":"/resources/:2:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#macos"},{"categories":null,"content":" 移动端特别推荐，X 优化版 piko，广告跳过 GKD 配合 Shizuku。 ","date":"2025-07-20","objectID":"/resources/:3:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#移动端"},{"categories":null,"content":" 其他 rutor 俄罗斯，版权 Open ","date":"2025-07-20","objectID":"/resources/:4:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#其他"},{"categories":null,"content":"这里记录的主要是我个人的笔记，因为记忆力不是很好 Orz~~； • 爱音乐，爱动漫，爱折腾，爱技术，爱数码，爱科幻 • 希望早日成为大牛。 • 喜欢宅，怕生，克服中… • 二刺螈 Lolicon（三次元熊孩子走开） 新年愿望：过目不忘，不出 bug，系统不崩… 学习历程： 折腾 Android（一年，果然不擅长前端布局） 折腾 Py、PHP、JS/TS、Go、Linux 等等大杂烩 期间把能知道的技术看了个遍…..额，是简单入门 主攻 Java Web 生态至今（其实就是 Spring 生态、微服务、架构摸索中、DevOps 摸索中） 个人对 JS/ES6 评价很高（学不动了，只能到 ES6 了），对 Vue、React、小程序等生态感兴趣 想要深度学习 Py，对深度学习、LLM/AIGC 之类感兴趣，对图片模式识别和生成尤其感兴趣 慢慢地个人时间越来越少，现在也就折腾下 PVE、Homelab、K3S、NAS，要警惕电子阳痿 总想搞个大新闻 ( ˘•ω•˘ ) ","date":"0001-01-01","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于我","uri":"/about/#"}]