[{"categories":["运行日志"],"content":"十年前接触到了 Github，当时主要就是为了搭建自己的免费博客(以至于随便起了个中二的 ID ・(´ ー `) · )，以记录学习过程中的心得，当时最火的方案毫无疑问是 Hexo + NexT 主题，上学期间对什么对感兴趣，也有时间去研究，写了不少乱七八糟的东西，虽不说有多少精品，数量上几百篇应该是够的。 虽然最近几年写的东西越来越少，时间精力确实大不如之前，不是没东西可写而是写一篇长文太耗费时间精力了，一些几句话能说明白的也不屑于形成一篇博客，都放在我的 BBS/Memo 里记录存档了。 还有一个关键是文章多了之后 Hexo 编译一次太慢了，NexT 的原作者早就退坑，现在看旧博客 有种年久失修的苍老感。 搭建新博客这个想法已经很久很久了，一直在拖延，这两天有时间搞了一下，其实一旦开了头进入状态了还是很不错的一件事。 新博客使用的是 Hugo，基于 Go 的一个静态网站工具，彻底解决 Hexo 编译慢的问题，当然它的可玩性和资源可能不如 Hexo，毕竟我也过了折腾的年纪。 昨天把旧博客的一些配置迁移到了新项目，目前也算是比较满意了，文章的话现在还不打算迁移过来，等我哪天有空挑一下把有用的搞过来，剩下的就保持原样吧。 ","date":"2025-07-20","objectID":"/%E8%BF%81%E7%A7%BB%E5%85%AC%E5%91%8A/:0:0","series":null,"tags":null,"title":"迁移公告","uri":"/%E8%BF%81%E7%A7%BB%E5%85%AC%E5%91%8A/#"},{"categories":["计算机"],"content":"起因是最近重装了系统，虽然有备份还原可用，但是垃圾也会一起还原，所以直接从头开始，比较之前也装了很多乱七八糟的东西，但是基本就没用过。。。。 但是现在都已经全部弄完了，现在才想起来记录一下，emmmm 目前我使用的设备有 Windows11 台式机、一台 MBP、一台 MacMini，所以软件生态会分 Win 和 macOS，开发使用 macOS 居多，其他都是 Win。 当然有些云服务类就不限于平台了，内容比较杂，因为现在都是使用中状态，大多数也只能想起来再记录或者下次重装系统的时候再整理了。 一样是不在多而在于精，在可用的情况下，最多保留个备用的完事，再多同类的也大概率不会用。 缓慢整理中 也许会忘记也说不定呢. ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:0:0","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#"},{"categories":["计算机"],"content":" Windows","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:1:0","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#windows"},{"categories":["计算机"],"content":" 终端工具还是因为习惯了 Xshell 了，但是貌似 WindTerm 用的人很多 Xshell putty WindTerm Termius 如果用，推荐这个补丁 Termius 之前在 macOS 上应该用过，怎么说呢，感觉卡卡的（Electron 你不要过来啊），外加没中文劝退了。 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:1:1","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#终端工具"},{"categories":["计算机"],"content":" 补丁增强可能有风险，谨慎使用（指被封号）。 BetterWX WX防撤回、多开等 WO Mic 还没舍得买麦克风，用手机当作电脑麦克风 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:1:2","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#补丁增强"},{"categories":["计算机"],"content":" 快速启动基本再用 uTools，最近看官方好像限制插件数量，引起不小的风波，如果没影响继续使用，有影响就换，我插件用的很少，基本就用个 截图 OCR + 翻译 uTools Flow Launcher Listary Quicker ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:1:3","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#快速启动"},{"categories":["计算机"],"content":" 远程控制Rustdesk 能自建最好，我最近也打算自建一个试一下； Rustdesk 网易 UU 远程 TeamViewer 除非必要，目前已不再推荐向日葵、ToDesk 之类，体验并不好。 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:1:4","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#远程控制"},{"categories":["计算机"],"content":" macOS配置文件同步推荐使用 Dotbot 初始化新系统，直接 git pull 下来 install 全部配置完毕的感觉太爽了。 brew 的备份使用 homebrew-bundle，例如： sh # 备份 brew bundle dump --describe --force --file=\"~/Desktop/Brewfile\" # 如果你使用 brew 安装了 MAS 的 App 需要提前安装 brew install mas # 恢复 brew bundle --file=\"~/Desktop/Brewfile\" ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:2:0","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#macos"},{"categories":["计算机"],"content":" 终端工具参考 Windows 中的介绍，Xshell 没有 Mac 版，现在使用默认终端 + 食用； FinalShell Termius kitty 除了 kitty 大多数感觉卡顿严重，也许我机器太老了。 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:2:1","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#终端工具-1"},{"categories":["计算机"],"content":" 通用\u0026服务类","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:0","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#通用服务类"},{"categories":["计算机"],"content":" 插件沉浸式翻译删掉了，不光是因为最近的隐私事件，VIP 功能太杂了，我其实都用不上，换成简约翻译。 Kiss Translator 配合 L 站的 DeepLX 效果更好 Auto-Group Tabs uBlock Origin uBlacklist tampermonkey Bitwarden Checker Plus for Gmail Elmo Chat Hover Zoom+ JSON-handle Octotree SteamDB SuperCopy Wikiwand - Elevate Wikipedia with AI Wikipedia Search 划词翻译 几枝 為什麼你們就是不能加個空格呢 扩展管理器（Extension Manager） 终结内容农场 不太常用的一些： Talend API Tester WebRTC Control Elmo Chat Obsidian Web Obsidian Web Clipper Screenity SmartProxy ScriptSafe Awesome Screenshot 截图录屏 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:1","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#插件"},{"categories":["计算机"],"content":" 脚本 LinkSwift MiniblogImgPop - 微博浮图 与 Hover Zoom+ 插件可以二选一 CSDNGreener 中文维基百科优先简体中文 自动无缝翻页 网盘自动填写访问码 HTML5视频播放器增强脚本 备用 TimerHooker 去除博客导流公众号 AI 验证码自动识别填充 万能验证码自动输入 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:2","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#脚本"},{"categories":["计算机"],"content":" API 调试Postman 用惯了，但是有点越来越恶心了，替代的也用了不少，还是找不到满意的。 Reqable Apifox Apifox 很多人推荐，但是个人还是不太喜欢，功能太多也有点烦，比较喜欢极简主义的；并且也是强制登录，强制云同步。 并且大概率也是（Electron 你不要过来啊） ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:3","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#api-调试"},{"categories":["计算机"],"content":" AI 开发辅助目前用的还是较少，但是很多人在吹，老了折腾不动了，思想也落后了还是觉得 AI 的代码不如自己写的好，速度确实快，适合一些简单、要快速开发的项目吧。 Roo Code 具有智能代码生成和重构功能的高级 AI 驱动编码助手。 应该就是 CC 这种的替代版，可以选择多种模型，比如本地部署的，以达到完全免费使用。 VSC Only RunVSAgent 使开发者能够在 JetBrains IDEs 或其他 IDE 平台中运行基于 VSCode 的编码代理和扩展。 应该是基于 Roo Code 的。 Claude Code Router 将 Claude Code 请求路由到不同的模型，并自定义任何请求。 看到有人发某 V 站的秀优越的帖子，以防有人不知道，像我这种穷鬼，Claude Code 是用不起的，别再说什么程序员一天的收入来买 $200 的 AI 也是物超所值的。 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:4","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#ai-开发辅助"},{"categories":["计算机"],"content":" 魔法相关Win 优先 Spark，Mac 优先 Surrge 学习版（可惜新版本的 TUN 需要关 SIP）。 sing-box 还是有点望而却步。 裸内核运行也不是不可能，搭配 zashboard 面板，也未必会差。 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:5","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#魔法相关"},{"categories":["计算机"],"content":" 影音聚合除必要情况，使用 Emby 公费服，一个月几块钱换来的质量比 CMS 的那些资源要高的多。 主要是亲戚朋友让你给找资源，总不能给个网盘分享吧，不是 VIP 的体验也没多好，还是在线看的体验好一些，可以直接从这些资源站找，比一般的满屏广告的野站要好的多。 MoonTV Web 服务聚合，对应的独立客户端选择 LibreTV-App 更新：存活了不到一个月，被人举报 DMCA 了，转生版本 LunaTV，不过作者不打算开源了，具体资源关注作者吧。 爱看机器人 TV 直播源 关注肥羊的 ALLINONE，可惜被人给恶心的退坑了，备用关注 Mursor 大佬 其他的还真没发现有好用的。 音乐聚合 HE-Music 需要 L 站 lv2+，且用且珍惜 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:6","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#影音聚合"},{"categories":["计算机"],"content":" 以图搜图之前 Google 的搜图挺好用的，但是感觉从 Lens 之后，准确度不太行 Yandex Bing Saucenao 二刺螈，再放几个备用的 https://trace.moe/ https://3d.iqdb.org/ https://www.iqdb.org/ https://ascii2d.net/ Yandex 目前感觉效果应该是最好的，但是魔法网络环境问题，很可能用不了，所以建议直接使用 ru 的域名，这个除了语言问题搜图是无限制的。 ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:3:7","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#以图搜图"},{"categories":["计算机"],"content":" 其他 MiscLinux 发行版选择？ 开发 GUI 的 Ubuntu，服务器 Debian，折腾 Arch； 像折腾又不想太折腾，基于 Arch Linux 的 CachyOS ？ ","date":"2025-08-12","objectID":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/:4:0","series":["工具箱"],"tags":["软件"],"title":"我的软件清单\u0026军火库","uri":"/%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%E5%86%9B%E7%81%AB%E5%BA%93/#其他-misc"},{"categories":["网络"],"content":"不少小伙伴有公网访问局域网的需求，也许是在外面需要访问家里的网络，也可能是公网服务需要回调你在开发的程序，大部分情况下实现内网穿透并没有那么难；我主要是记录下对 NAT 技术的理解，以及它对内网穿透的影响。 看你下大约在 7 年前我就做过一篇关于内网穿透的笔记，现在我觉得有必要进行整理下给正式的发出来，当年还没有 AI 很多解释还需要自己去找，现在问 AI 方便的多，我也是精简一下做个记录。 Tip 由于整个 HTTP 请求到回复过程牵扯到的技术太多，这里默认当作各位有一定的了解，如果不理解可以问下 AI，这对理解和解决一些网络问题，或者配置\"魔法\"软件的时候很有用。 这里主要关注这个链路中 NAT 和 IP 的部分。 由于联网设备众多和国际上我们分得的 IPv4 数量无法保证为每一个宽带用户提供全球唯一的公网 IPv4 地址。因此很多用户会发现通过路由器端查看到的 WAN 端 IP 与百度 “IP” 关键词所得到的 IP 不一致，并且前者的 IP 为一个私有 IP。 而还有一些情况下，公网IP比较昂贵，企业虽然本身也持有少量的独立的公网IP，但是由于成本限制无法为企业内每一台主机都提供一个公网IP，或者内网并不是所有服务都需要暴露到公网中进行访问，那么企业有可能就会使用 NAT 技术将大量的内网 IP 通过一定规则映射到公网 IP 上。 而最常见的其中一种技术就是 NAPT，也叫“网络端口地址转换”。因为一般一个服务都是通过一个端口来提供，因此通过这种方式可以将特定的服务通过特定的规则开放到少量的公网 IP 上。 国内家庭宽带（移动尤其严重）常见的就是 100 开头的地址，公司学校的网络也可能如此，这种情况无法通过**端口映射 ** 等方法让内网设备暴露给外网，只能通过内网穿透方式。 我当前使用的联通改桥接后获取到的是公网 IP，我目前虽说不需要内网穿透了，但是大部分人并没有我这么好运气。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:0:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#"},{"categories":["网络"],"content":" 什么是NAT在计算机网络中，网络地址转换（Network Address Translation，缩写为 NAT），是一种在 IP 数据包通过路由器或防火墙时重写来源 IP 地址或目的 IP 地址的技术。 假设我的 PC 机是 192.168.1.100，我的手机是 192.168.1.101，宽带拨号获取到的公网 IP 是 203.0.11.12，这个 IP 地址就代表着我家网络总出口； 现在如果我访问淘宝，淘宝服务器只能看到 203.0.11.12 这个 IP 的某个端口（某个设备）访问了它，不能确定具体是那个设备，这就导致了即使知道我家 IP 是 203.0.11.12，也不能直接地对网络下具体的设备发起通信。 我们作为客户端请求公网服务使用的是系统分配的临时的随机端口，而淘宝网作为服务是使用的固定端口，也是为了让别人都能找到它，具体就是访问时可能就是 203.0.11.12 的 10101 端口与淘宝服务器的 443 端口建立连接。 但是在路由器大多数也是网关（理解为大门，所有的数据进出都需要经过它）这个关键角色下，它知道并且会记录家里的那个设备访问你外面的那个服务，当别人给你回复数据的时候先经过网关，再按照对应表转换成给具体某个设备的数据包。 大体先有个概念，下面会继续解释。 这种技术被普遍使用在有多台主机但只通过一个公有 IP 地址访问因特网的私有网络中。根据规范，路由器是不能这样工作的，但它的确是一个方便且得到了广泛应用的技术。当然，NAT 也让主机之间的通信变得复杂，导致了通信效率的降低。 NAT 最初发明的一大目的就是解决公网 IP 的 IPv4 地址资源枯竭的问题，所以国内大城市的主流运营商经常会使用这种方法来规避资源枯竭的问题（我国普及 IPV6 可能还需要一定时间），端口 NAT 转换让 IP 地址得到了极大的利用，NAT 的一个特点就是：对外隐藏了真实地址，有的甚至还不止一层 NAT。 在一定程度上，NAT 依赖于本地网络上的一台机器来初始化（这个活一般是路由器负责）和路由器另一边的主机的任何连接，它可以阻止外部网络上的主机的恶意活动。这样就可以阻止网络蠕虫病毒来提高本地系统的可靠性，阻挡恶意浏览来提高本地系统的私密性。很多具有 NAT 功能的防火墙都是使用这种功能来提供核心保护的。 运营商会贴心的禁用高危端口，所以即使有公网 IP，80、443、22 这些端口也是没法用的。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:1:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#什么是nat"},{"categories":["网络"],"content":" 基本网络地址转换(Basic NAT)这一种也可称作 NAT 或“静态 NAT”，在 RFC 2663 中提供了信息。它在技术上比较简单，仅支持地址转换，不支持端口映射，这种情况应该是很少见的吧。 但是由于改变了 IP 源地址，在重新封装数据包时候必须重新计算校验和，网络层以上的只要涉及到IP地址的头部校验和都要重新计算。 Basic NAT 要维护一个无端口号 NAT 表，结构如下: 内网IP 外网IP 192.168.1.55 219.152.168.222 192.168.1.59 219.152.168.223 192.168.1.155 219.152.168.224 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:1:1","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#基本网络地址转换basic-nat"},{"categories":["网络"],"content":" 网络地址端口转换(NAPT)这种方式支持端口的映射，并允许多台主机共享一个公网 IP 地址。 支持端口转换的 NAT 又可以分为两类：源地址转换和目的地址转换。 前一种情形下发起连接的计算机的 IP 地址将会被重写，使得内网主机发出的数据包能够到达外网主机。 后一种情况下被连接计算机的 IP 地址将被重写，使得外网主机发出的数据包能够到达内网主机。 实际上，以上两种方式通常会一起被使用以支持双向通信 。 NAPT 维护一个带有 IP 以及端口号的 NAT 表，结构如下: 内网IP 外网IP 192.168.1.55:5566 219.152.168.222:9200 192.168.1.59:80 219.152.168.222:9201 192.168.1.59:4465 219.152.168.222:9202 在 NAT 网关上会有一张映射表，表上记录了内网向公网哪个 IP 和端口发起了请求，然后如果内网有主机向公网设备发起了请求，内网主机的请求数据包传输到了 NAT 网关上，那么 NAT 网关会修改该数据包的源 IP 地址和源端口为 NAT 网关自身的 IP 地址和任意一个不冲突的自身未使用的端口，并且把这个修改记录到那张映射表上。 最后把修改之后的数据包发送到请求的目标主机，等目标主机发回了响应包之后，再根据响应包里面的目的 IP 地址和目的端口去映射表里面找到该转发给哪个内网主机。 这样就实现了内网主机在没有公网 IP 的情况下，通过 NAPT 技术借助路由器唯一的一个公网 IP 来访问公网设备。 说一下它的特点吧，也可以说是 NAT 的特点： 网络被分为私网和公网两部分，NAT 网关设置私网到公网的路由出口. 网络只能由私网侧发起，公网无法主动访问私网主机 (是这样设计的,但是可以通过打洞的方式，就是内网穿透) NAT 网关在两个访问方向上完成两次地址的转换，出口替换源地址，入口替换目的地址 NAT 网关的存在对通信双方保持透明 NAT 网关为了实现双向翻译，需要维持一张关联表，将会话信息保存 从这里我们可以看到，NAPT 只解决了内网主机在没有公网 IP 的情况下如何访问公网主机的问题，但是并不能解决公网主机如何主动向内网主机发起请求的问题。 Tip NAT 还可以用作负载均衡、失效终结、透明代理等。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:1:2","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#网络地址端口转换napt"},{"categories":["网络"],"content":" NAT的类型在确定内外穿透方案之前，需要先了解一下自己网络的 NAT 类型，不同的类型穿透的难度是有区别的，根据映射关系中对外部主机发送的数据的限制可以分为以下几种类型： NAT 类型 映射行为 外部主机发送到内部（谁能发回） 穿透难度 Full Cone 全锥形 固定映射：内IP:内端口 -\u003e 外IP:外端口，对所有外部连接生效。 任何外部主机只要知道这个公网IP和端口，就能向内网主机发送数据。 最易 Restricted Cone 受限锥形 固定映射：内IP:内端口 -\u003e 外IP:外端口 内网主机需先向外部主机发送数据，该外部主机才能向内网主机发送数据。 容易 Port Restricted Cone 端口受限锥形 固定映射：内IP:内端口 -\u003e 外IP:外端口 内网主机需先向外部主机发送数据，然后被内网主机访问过的这个外部IP和端口可以回复数据 中等 Symmetric 对称形 动态映射：内IP:内端口 -\u003e 随机外IP:不同的外端口。每次与新目的通信都可能分配新端口。 内网主机与每个外部主机通信时创建的 IP 和端口可以回传数据 最难 Port Restricted Cone NAT 和 Restricted Cone NAT 的主要区别点: 特性 Restricted Cone NAT (限制锥形 NAT) Port Restricted Cone NAT (端口限制锥形 NAT) 映射端口 对于同一个内部 IP:端口，外部映射端口始终不变，无论目标是谁。 对于同一个内部 IP:端口，外部映射端口始终不变，无论目标是谁。 入站过滤 更宽松 更严格 入站条件 必须是内部主机主动发送过包的目标 IP 的入站包才允许通过。 必须是内部主机主动发送过包的目标 IP 和目标端口 的入站包才允许通过。 源端口限制 不限制外部入站包的源端口。只要源 IP 匹配即可。 严格限制外部入站包的源端口。源 IP 和源端口都必须匹配。 UDP 打洞 更容易。只要双方都向对方的公共 IP 发送过包，就能打通。 可以打洞。双方必须同时向对方的公共 IP:Port 发送包，才能打通。因为入站包的源 IP 和源端口都必须匹配。 有些人（大部分游戏玩家）也会将 NAT 分为以下类别： NAT Type 1 (Open / 开放) 对应的技术 NAT 类型： 无 NAT 或者 Full Cone NAT (如果确实有NAT但非常宽松，行为上等同于没有限制)。 NAT Type 2 (Moderate / 中等) 对应的技术 NAT 类型： Restricted Cone NAT 或 Port Restricted Cone NAT。 NAT Type 3 (Strict / 严格) 对应的技术 NAT 类型： Symmetric NAT。 或者简单粗暴按照上面表格的四种类型 NAT 1、2、3、4，测试自己是那种 NAT 类型可以使用一些公共 STUN，小米也提供了一个1。我也找了一些开源工具2，但是整体来说 Surfboard 自带的 NAT 检测更好用，这类魔法软件大多也自带测试工具。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:2:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#nat的类型"},{"categories":["网络"],"content":" STUNSTUN (Session Traversal Utilities for NAT) 协议的主要作用是帮助内部客户端发现它自己被 NAT 映射后的公共 IP 地址和端口，以及识别其所处的 NAT 类型。 工作原理是客户端向一个已知的 STUN 服务器发送请求。STUN 服务器会回复客户端它看到的客户端的公共 IP 和端口。 仅仅通过一个简单的绑定请求是无法识别 NAT 类型的。STUN 协议定义了更复杂的测试机制来区分不同的 NAT 类型。这通常涉及客户端向 STUN 服务器的不同端口或不同的服务器 IP 地址发送额外的请求，并分析服务器的响应行为。 客户端首先向 STUN 服务器的 IP1:Port1 发送一个请求。服务器在响应中返回客户端的公共 IP:PortA。 然后，客户端要求 STUN 服务器由另一个 IP2:Port2 发送一个响应包（或者 STUN 服务器本身就用不同的 IP/Port 回复）。 如果客户端能成功收到来自 IP2:Port2 的响应，说明 NAT 是 Full Cone NAT。因为 Full Cone NAT 对所有外部流量都是开放的，只要内部有出站连接，外部任何源地址和端口都可以发送数据回来。 如果客户端收不到响应，说明 NAT 可能不是 Full Cone，需要进一步测试。 客户端向 STUN 服务器的 IP1:Port1 发送一个请求，得到映射后的公共 IP:PortA。 然后，STUN 服务器从一个不同的 IP 地址 (例如，IP2:Port2) 向客户端的公共 IP:PortA 发送一个请求（注意，这个请求的源 IP 改变了，但端口可能相同或不同）。 如果客户端能收到来自 IP2:Port1 (相同端口，不同 IP) 的响应，但收不到来自 IP2:Port2 (不同 IP，不同端口) 的响应，则可能是 Port Restricted Cone NAT。 因为 Port Restricted Cone NAT 允许来自原始目标 IP 相同端口的响应，但会过滤掉来自不同端口的连接。 如果客户端能够收到来自 IP2:Port1 和 IP2:Port2 的响应，则可能是 Restricted Cone NAT。 因为 Restricted Cone NAT 允许来自不同 IP 但相同端口的响应，并且可能也允许来自不同端口的响应。 这部分测试通常比较复杂，STUN 客户端会通过多次请求和比较响应来确定 NAT 的过滤规则。 客户端从同一个内部 IP:Port，向 STUN 服务器的不同 IP 地址或不同端口发送绑定请求。 如果每次请求得到的外部映射端口都不同，那么几乎可以确定是 Symmetric NAT。 UDP 打洞对于 Full Cone NAT 和 Restricted Cone NAT 还是很简单的，对于 Port Restricted Cone NAT 的关键在于外网IP_目标是受限制的，必须是内部主机主动发送过包的目标 IP。即使外部包的源端口不同，只要源 IP 匹配，它就能进来。 STUN 主要用于识别 NAT 类型和获取映射信息。它不能直接穿透 Symmetric NAT，因为它无法预测 Symmetric NAT 每次都会改变的端口映射。 对于 Cone NATs（Full, Restricted, Port Restricted），STUN 可以协助进行 UDP 打洞。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:2:1","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#stun"},{"categories":["网络"],"content":" 关于私有地址复习下网络方面的知识，这个肯定都学过，至于还记不记得….. 因特网域名分配组织 IANA 组织（Internet Assigned Numbers Authority）保留了以下三个 IP 地址块用于私有网络。 10.0.0.0 - 10.255.255.255 (10/8比特前缀) 172.16.0.0 - 172.31.255.255 (172.16/12比特前缀) 192.168.0.0 - 192.168.255.255 (192.168/16比特前缀) 主流的家用路由器使用 C 类私有地址作为路由器 LAN 端的 IP 地址较多，所以我们可以看到路由器设置页面的 IP 一般都为 192.168 开头。 一些大型企业就需要使用B类甚至A类地址段作为内部网络的地址段。A类地址的容量最大，可以容纳16777214个主机，B类地址可以容纳65534个主机，C类地址可以容纳254个主机。 还有就是 100 开头的这种 IP，大多也不是公网，一般用作运营商级 NAT。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:3:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#关于私有地址"},{"categories":["网络"],"content":" 为什么要内网穿透先说说家庭宽带的情况吧。家庭宽带如果没有公网 IP，那么意味着你在本机上监听的任何端口，都只能在本机网卡所在的网络中访问（LAN），也就是常说的内网/局域网。 如果这种情况下想要让 WAN 端（如果运营商为你分配了公网 IP，那么 WAN 端所连接到的网络通常就是公网），那么需要在路由器上做端口映射。比如说路由器的 LAN IP 为 192.168.1.1，WAN IP 为 23.23.23.23； 我想让内网 192.168.1.2 主机的 80 端口提供的 HTTP 服务器直接能够在公网中通过 http://23.23.23.23 访问，那么就要将 192.168.1.2:80 映射到 23.23.23.23:80 上（当然，家庭宽带是不会给你开放 80 端口的）。 但是通常情况下，运营商是不会给普通用户公网 IP 的。那么用这种方法映射，在公网仍然是无法访问的，因为你的路由器 WAN 端连接的又是运营商更上一级的路由器 LAN 端，严重一点，甚至是层层连接最后才到公网，这种行为称作流量穿透。 国内某电，某动的宽带就有大量这种行为。通过流量穿透的方式来提供的宽带服务，看似便宜，实则影响很大，由于大家公用一个 IP，可能会导致很多网站的反 SPAM 策略伤及无辜，或者内部为了节省带宽，使用缓存，导致一些不该缓存的敏感安全页面被缓存起来，甚至导致部分网站缓存失效完全打不开。 有的人发现，即使自己有公网IP，但是仍然无法通过常规方法架设服务器，这是怎么回事呢？这是运营商为了防止个人随意开设各种非法服务，也防止黑客通过扫描器进行抓鸡和批量扫描，将一些常用端口进行了封禁，比如说我们这的中国电信就将 80，8080 等端口封禁了。 这样封禁，虽然一定程度上保证了我们的网络安全，比如说前段时间的勒索病毒正因为国内大部分用户没有独立的公网IP，并且操作系统最容易爆发漏洞的一些，135，139 等端口被运营商封禁了，使得国内个人家庭电脑中招的概率小了很多；但是导致即使有公网 IP，也无法使用常用端口向外网提供服务，只能更换到其他端口。这样有什么不好呢？比较典型的问题就是 WEB 网站默认使用 80 端口，那么在输入网址的时候可以不用带上端口号，显得比较美观。 还有的时候我们在对企业做渗透测试的时候，发现企业某台公网服务器只对公网开放了常见的 80 端口，而我们提权时需要用到的 3389 等端口没有对公网开放，这个时候又该怎么办呢？ 我们如果在自己拥有一台具有公网 IP 服务器的情况下，我们可以借助这台公网 IP 服务器提供转发服务。解决这些问题的方式就是内网穿透了，比较流行的软件比如 Frp，当然如果能进行 UDP 打洞实现 P2P，要比中转快的多（服务器带宽不高的情况下）。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:4:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#为什么要内网穿透"},{"categories":["网络"],"content":" 内网穿透原理先介绍通用方案，先假设我们自己有一台公网服务器，他的 IP 为 45.45.45.45，通过这台服务器建立一个隧道，转发我们的数据请求，有点类似代理。 我们的一台内网服务器 IP 为 10.10.10.10 ，我们现在想把它上的 HTTP 服务通过 45.45.45.45 提供对外访问。 也就是借助公网服务器的网络来发布一个内网服务。 因为公网服务器 IP 是公开的，我们让内网的 10 机器去连接 45 的某个端口，这样 45 和 10 之间建立你一个长连接； 然后当有任何客户端主动连接公网 45 的 80 端口时，公网接收到数据之后通过先前建立好的隧道转发到内网主机 10，内网主机接收到来自隧道的数据包后再主动连接内网主机自身的 80 端口，待 HTTP 服务器程序处理完这个数据包，生成了响应报文之后再原路转发回去，最终到达公网的 80 端口，然后返回给最开始请求公网服务器 80 端口的客户端。 这种原封不动的转发方式通常叫做透明传输或者透明代理。 这种方法基本适用于所有的网络环境，只要你的设备能上互联网，前提是你得拥有一台拥有\"公网IP\"的主机充当\"跳板\"，比较流行的工具有 Frp。 UDP 打洞虽然一般也需要一个 STUN 服务器做探测，以决定使用什么方式穿透，但是建立 P2P 连接后就不需要走服务器流量了，除非是 像一些视频、语音通话，P2P 下载，都可以使用这种方式。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:5:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#内网穿透原理"},{"categories":["网络"],"content":" UDP 打洞UDP Hole Punching（UDP 打洞）原理是当两个位于不同 NAT 后面的客户端想要直接通信时，它们都向一个已知的“打洞服务器”（或协调服务器）发送一个 UDP 包，由协调服务器通知双方对方的 IP 和端口信息。 客户端 A 向打洞服务器发送一个 UDP 包。NAT A 为 A 创建一个临时映射（例如 外A_IP:外A_端口）。 客户端 B 向打洞服务器发送一个 UDP 包。NAT B 为 B 创建一个临时映射（例如 外B_IP:外B_端口）。 打洞服务器将 外A_IP:外A_端口 告知 B，将 外B_IP:外B_端口 告知 A。 此时，A 知道 B 的公共地址，B 知道 A 的公共地址。它们会同时向对方的公共地址发送 UDP 包。 如果 NAT 是 Cone 类型：当 A 的 UDP 包到达 NAT B 时，NAT B 会检查这个包。由于 B 之前已经向外发送过包，NAT B 可能会认为这是一个合法的返回流量，从而允许这个包通过。同理，B 发给 A 的包也能通过 NAT A。这样，两个客户端之间的“洞”就被打通了，可以直接进行 P2P 通信。 适用性： 对 Full Cone NAT、Restricted Cone NAT、Port Restricted Cone NAT 效果很好。 局限性： 无法穿透 Symmetric NAT。因为 Symmetric NAT 每次向不同目的发送包时会使用不同的外部端口。当 A 知道 B 的公共 IP 和端口，并向其发送包时，NAT A 会为这次通信分配一个新的外部端口，这个新端口可能不是 B 的 NAT 所期望的那个端口，从而导致包被丢弃。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:5:1","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#udp-打洞"},{"categories":["网络"],"content":" 穿透防火墙为了安全起见，通常会在网络中加入防火墙，防火墙有入站规则和出站规则。如果不是非常严格的安全管控，通常是不会设置出站规则的，但是入站规则一般都会设置的，比如说外部可以通过80端口传入内网的WEB服务器访问网页，但是不能通过3389端口登陆内网的远程桌面。 而在内网渗透的过程中碰到这种情况，我们也可以借助上面内网传统的方式实现穿透防火墙的入站规则。因为防火墙通常只拦截了入站，没有拦截出站，那么我们可以让内网服务器主动出站（主动连接到黑客的服务器），与黑客自己的服务器打通隧道，最终绕过防火墙连上3389远程桌面。 还有一种情况就是我们已经拿下了内网其中一台并没有做任何防火墙规则的白名单服务器，但是我们想连上内网另一台做了入站规则的目标服务器，那么我们可以让这台白名单服务器作为一个跳板，让他先监听自身任意一个端口，然后在有任何用户连上这个端口之后，白名单服务器就主动连上内网的目标服务器，然后借助这台白名单服务器打通黑客和目标服务器的连接隧道。 而在黑客工具中大名鼎鼎的 lcx 原理也就是如此，前者的实现是 lcx 的 listen 和 slave 命令，后者的实现是lcx的tran命令。 IP 隧道是指一种可在两网络间用网际协议进行通信的通道。在该通道里，会先封装其他网络协议的数据包，之后再传输信息。 在IP隧道中，每个IP包、来源/目的地址信息都被封装在一个数据包中，该数据包用于实际物理网络传递。 因为防火墙的本质及原始数据报文被隐藏了，IP 隧道经常用于绕过简单的防火墙规则，通常需要通过内容控制软件才能对 IP 隧道进行筛查。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:6:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#穿透防火墙"},{"categories":["网络"],"content":" 其他配置如果你拥有公网 IP，下面的 DDNS 和端口映射你大概也需要。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:7:0","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#其他配置"},{"categories":["网络"],"content":" DDNS适用于有公网 IP 的，在路由器的管理界面应该看到过，由于运营商分配的公网 IP 地址不断变动，DDNS的原理就是内网设备（一般是路由器）每隔一段时间对DDNS服务器发起请求，DNS服务器将请求的IP记录下来并且刷新相关域名的解析记录（一般是A记录），这样每次拨号怎么变动 ，域名总是指向路由器所分配的公网IP。 一般DDNS服务都是免费的，常见的路由器里会集成，但是并不好用，推荐 DDNS-GO。 不过让我想到了以前玩远控时候用的动态域名，肉鸡上线后会自动链接这个域名，然后通过 DDNS 就相当于都在链接你的电脑了。 应用：解决很多网络视频服务器和网络摄像机通过远程访问时需要一个固定的 IP，这也是要公网 IP 的最好接口，家里有摄像头需要。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:7:1","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#ddns"},{"categories":["网络"],"content":" 端口映射上面说过一些端口例如 80 运营商的防火墙可能会拦截，并且只通过一个公网 IP 无法确定具体是找你局域网的那台设备，因为这个公网 IP 是你家庭所有设备通过 NAT 共用的； 路由器作为家庭网络的入口，可以在上面配置当有人请求我（公网 IP）的 8000 端口的时候，转发到内网的 192.168.9.1 这台机器的 80 端口上，这个规则就是一条端口映射。 ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:7:2","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#端口映射"},{"categories":["网络"],"content":" UPnP UPnP (Universal Plug and Play) 是一套网络协议的集合，旨在使网络设备（如电脑、手机、路由器、打印机、智能家电、游戏机等）能够彼此自动发现、互相通信和协同工作，而无需用户进行复杂的配置。 它的核心理念是“即插即用”——设备连接到网络后，能够自动与其他设备和应用程序交互。 简单来说，UPnP 就是让家里的智能设备们能够“说上话”，并且能自动地完成一些网络配置任务。 内网穿透语境中，表示允许局域网内的设备自动请求路由器进行端口映射 (Port Mapping)。 也就是说，内部设备可以向支持 UPnP IGD 的路由器发送指令，告诉路由器“请帮我把外部的某个端口映射到我内部的某个端口和 IP 地址”。 路由器中这个功能默认是关闭的，我也不建议开启，它带来的风险比较大。 例如 https://www.checkmynat.com 在线探测，小米（stun.miwifi.com:3478）和搜索关键字 public-stun ↩︎ 例如 NatTypeTester、NATMap ↩︎ ","date":"2025-07-28","objectID":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:7:3","series":null,"tags":["内网穿透","NAT"],"title":"理解NAT和内网穿透","uri":"/%E7%90%86%E8%A7%A3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#upnp"},{"categories":["开发日志"],"content":"如果经常需要在各种开发项目之间切换，而这些项目又各自需要不同的运行环境，尤其是不同的运行时版本或依赖库，那么没有一个环境管理工具就会变得特别混乱。 作为一个主业 Java 方向的，看到 Node.js/Python 的包管理，真的是头大，处理版本问题那是小心翼翼，轻易不敢升级，一不小心就跑不起来了。。。 后来接触到有一些管理软件可以快速切换版本，但是每一种语言装一个还是有点麻烦，毕竟像我这样同时有多个语言环境需求的肯定不在少数，每一个工具都是学习成本； 后来我发现有一种多语言环境管理工具，可以把各个语言统一管理，并且他们之间的配置文件大多能兼容，这个就是我推荐的，放在最后。 ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:0:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#"},{"categories":["开发日志"],"content":" Node.js前端（当然也能做后端了）我只能说发展太快了，我这种非专业的根本追不上，各种新工具层出不穷，JS 的高度灵活性真是能玩出花，node 的各个版本也有一定的差异，官方包管理 npm 也有一些历史问题被人疯狂吐槽，现在我知道的比较出名的代替是： Yarn 并行下载安装，在大型项目中使用更可靠的锁定文件. pnpm 通过内容寻址来去除重复依赖，节省磁盘空间，加速安装. 当然这玩意发展太快，现在又出现了什么新工具我就不了解了。 而 node 版本的管理，我认为比较有名的有这几个： nvm 基于 shell 脚本的 Node.js 版本管理工具，老牌，广为人知和功能全面 n 基于 npm 的 Node.js 版本管理工具，以其简洁的命令行界面和快速的安装、切换速度著称 fnm 基于 Rust 编写的 Node.js 版本管理工具，以其极快的速度和跨平台支持而闻名 这些工具的具体使用方法就不展开说了，基本都差不多，毕竟我觉得现在有了更好的方案。 让我最难受的大概是每个项目依赖都要在当前文件夹安装一遍，嵌套可能还深不见底，Windows 下压缩打包都不一定能打包的了；到现在还能看到开发一个 app 100kb，安装的依赖 10G 的地狱笑话 haha ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:1:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#nodejs"},{"categories":["开发日志"],"content":" Python个人感觉它的包管理和 Node.js 的 npm 真的挺类似的，py 官方的包管理是 pip，也经常被吐槽慢，也同样存在依赖库版本兼容问题，并且还有 python2/python3 的兼容问题，虽然现在基本都是 py3 的天下了。 在介绍版本环境控制之前，先介绍两个好用的工具，我使用的是 virtualenv 来做环境管理隔离，如果用的是 fish 的话要用 VirtualFish；而 uv 则是解决 pip 依赖安装速度等问题；再搭配版本管理工具基本就能满足大部分需求了。 VirtualFish 的一些基本使用方法： sh # 创建新环境 vf new name # 激活环境 vf activate name # 退出环境 vf deactivate # 删除环境 vf rm name # 查看环境 vf ls # 启用自动激活 vf auto enable uv 的一些基本使用方法： sh # 安装单个包（比 pip 快的多） uv pip install requests uv pip list uv pip list --outdated # 查看更新包 # 全局生效 uv pip install --system pandas 当然如果是非编程方向，例如数据分析方向，uv 未必合适，可能还是 conda 更合适一些，python 的生态真的太割裂了，conda 也被吐槽的很厉害，或者可以尝试一下 miniconda 或者 pixi VirtualFish 和 uv 这类工具完全可以并且通常推荐和版本管理工具搭配使用，毕竟他们解决的不是一类问题。 ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:2:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#python"},{"categories":["开发日志"],"content":" JavaJava 生态我感觉相比之下还是要好得多，maven/gradle 下大部分的库都是可以向下兼容的，从 JDK8 之后 JDK 的向下兼容会差一些，毕竟放弃历史包袱也是为了更快的适应时代潮流。 对于 JDK 版本管理问题，推荐 sdkman，它在 MacOS/Linux 下体验还是不错的，是一个 CLI 工具，可以比较方便的切换、安装不同发行版的 OpenJDK 版本。 也支持安装一些 Java 生态的常用工具，感兴趣的可以看看使用手册。 sh # 安装 cli，查看版本 curl -s \"https://get.sdkman.io\" | bash sdk version # 安装 JDK，默认 tem sdk install java # 指定版本 sdk install scala 3.4.2 # 卸载 sdk uninstall scala 3.4.2 # 搜索查看可安装的发行版 sdk list java # 使用 sdk use scala 3.4.2 sdk default scala 3.4.2 sdk current java ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:3:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#java"},{"categories":["开发日志"],"content":" OpenJDK 发行版选择自从 Java8 之后 Oracle 的骚操作，官方版本的 JDK 肯定是不推荐的，能用得起的企业也没多少吧。 主要的发行版有： Oracle OpenJDK Adoptium (Eclipse Temurin) Amazon Corretto Red Hat build of OpenJDK BellSoft Liberica JDK Azul Zulu Alibaba Dragonwell … 其他的华为、腾讯都有自己的发行版，他们这些云计算厂商都是根据自己的平台优化过的，所以除非绑定平台可以尝试，要不然还是用一些通用的吧。 说结论，Liberica JDK 与 AdoptOpenJDK（现已更名为 Eclipse Temurin）可能是最佳的选择。 Liberica 是 Spring 官方推荐的发行版，我了解了下 BellSoft 这家公司，是一家专注于 Java 技术的公司，是 OpenJDK 的主要贡献者之一，根据场景有不同的版本，例如 Lite 版本是容器优化，Standard 日常开发，Full 可以 Fx 等 GUI 的开发。 它家我看还有对 Java App 特别优化的 Linux 容器 Alpaquita，有空我也可以尝试下。 而 Eclipse Temurin 原名 AdoptOpenJDK 就不用说了，Eclipse 社区出品不会有太大问题，优点和缺点都是一个，社区驱动嘛，有舍有得，sdkman 默认的就是 Temurin。 我之前一直使用的是 AdoptOpenJDK，现在打算切换到 Liberica 试试。 ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:3:1","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#openjdk-发行版选择"},{"categories":["开发日志"],"content":" 通用版本管理推荐上，个人的排序是 mise \u003e vfox \u003e asdf 这一类工具一般都会把版本信息保存在项目目录下的一个配置文件中，这样除了工具可以识别当前环境信息，还可以在项目中共享这些信息，确保团队中的每个人都使用相同的工具版本。 sh # mise exec/x 虽然非常适合运行一次性命令，但激活 mise 会更加方便。 mise exec node@22 -- node -v # mise node@22.14.0 ✓ installed # v22.14.0 mise x python@3.12 -- ./myscript.py # 没有特殊说明，配置仅对当前目录生效 mise use --global node@lts mise ls mise use node@23 pnpm@10 # 仅安装，不激活 mise install node mise cache clear mise ls-remote node # 查看所有可用的插件 mise plugins list-all # 安装插件（比如要使用 node） mise plugins add node # 查看已安装的插件 mise plugins ls # 查看已安装的版本 mise ls node mise ls mise use node@lts # 设置环境变量 mise set NODE_ENV=development # 查看当前配置 mise settings mise 的安装参考文档 mise 兼容 asdf 等环境管理软件的配置，并且因为 mise 的设计灵感源自 asdf，老版本兼容 asdf 的插件系统，但是现在并不推荐；速度比 asdf 快的多。 他们两个的配置文件包括下文的 vfox 都是可以互相识别的。 vfox 和 asdf 差不多，也是通过安装插件来实现各种功能。 sh # 查看所有插件 vfox available # 添加插件 vfox add nodejs # 安装 vfox install nodejs@latest vfox install nodejs@21.5.0 vfox search nodejs # 全局生效 vfox use -g nodejs # 临时 session/当前终端生效 vfox use -s nodejs ","date":"2025-07-25","objectID":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:4:0","series":[],"tags":["Node.js","Python","Java","Tools"],"title":"开发中的环境版本管理工具","uri":"/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#通用版本管理"},{"categories":["计算机"],"content":"最近想用虚拟机装个 XP/7 怀旧一下老游戏，没想到遇到这么多问题。。。 首先我现在用的是 Win11 系统，除了家庭版，其他都是默认开启 Hyper-V 和 WSL2 的，既然 VM 现在免费了，那么我当然优先考虑使用 VM 来装。 话说现在博通收购 VM 以后，虽然免费了，但是下载是真难下，需要注册个账号，官网现在也乱的很，也许之后慢慢会正常吧，放一个下载地址 安装 VM 的时候默认它会出一个提示，反正意思就是和 Hyper-V 冲突，使用他们的兼容模式，如果没有，那说明你没有开启 Hyper-V。 Hyper-V 是微软的虚拟化平台，也可以说是 Windows 自带的虚拟机，类似 Win7 时代的 Virtual PC，类比 ESXi 和 KVM 这些，本来是给服务器用的。 Hyper-V 它是 type-1 类型，直接在硬件层运行，可以理解为是你电脑上跑了个 Hyper-V 然后它虚拟出来了个 Win11 系统给你用，如果你新建一个虚拟机，那么这个虚拟机和宿主机 Win11 是同级别的，共享硬件，尤其是显卡共享就简单了； 所以 Hyper-V 的性能会比较高；但是同时也有人指出这样宿主机的游戏性能会降低，但是一般人应该感觉不出来。 但是话说回来，Hyper-V 毕竟是微软搞的，如果想虚拟个 Linux 或者其他非 Win 的系统可能就不是那么好用了，易用性也不如 VM。 Hyper-V 我也测试过虚拟个 XP，效果也不是很好，可能微软已经放弃对老系统的支持了吧，并且确实不如 VM 顺手。 VMware Workstation Pro 以及 VirtualBox 这类软件是采用的 VT 虚拟化技术，某些场景下可能是个更好的选择。 VM 现在虽然可以和 Hyper-V 共存，但是我实际使用下来感觉不太行，尤其是虚拟 XP 更是非常的卡。 ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:0:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#"},{"categories":["计算机"],"content":" 卡顿问题装完 XP 后感觉非常卡顿，声音也断断续续，看了下 Win10 应该还好，Win11 尤其严重； 既然知道了 Hyper-V 的原理，我也有考虑是 VT 和 Hyper-V 的兼容性问题，当然也有人说和 VM 的版本有关系，我换过 VM16、VM15，效果是有的，但是不明显。 于是我决定关闭 Hyper-V 和 WSL，毕竟这俩我用的也不多，非要用还是直接 VM 虚拟一台 Linux 或者直接用家里的 PVE 上的 Ubuntu 吧。 折腾到后来才发现一个问题，Win 下的 Docker 现在是依赖 Hyper-V 的，如果把 Hyper-V 关了就没法用 Docker 了，于是来来回回折腾了好几次。 后来看到有网友说即使是 Win11，与 Docker 的兼容性还是不好，默认都会把数据、镜像啥的塞到 C 盘，性能占用也很大（有老哥说 Hyper-V 虚拟机不限制内存的话默认是有多少吃多少，这个我没有求证） 最后我还是决定关掉 Hyper-V，一来 Hyper-V 虚拟机我确实用着不顺手，即使使用三方 NanaBox 类似的软件管理也还是不习惯，性能对我来说倒是其次的。 Docker 的问题可以虚拟一个 Debian 来搞，或者家里有 PVE 的话这个其实也省了。 ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:1:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#卡顿问题"},{"categories":["计算机"],"content":" 关闭 Hyper-V首先我还是建议先去 Win 的安全中心里的防护里把内存隔离关了，我觉得用处不大，可能还影响性能； 听老哥说如果开着防护像国内腾讯、网易的游戏进行作弊扫描的时候也是改不了内存的，有的游戏可能会强制你关掉才能进；亦或者有的防作弊检测还会扫盘，这个真是有点恶心人，题外话了。 另外一个是使用各种安卓模拟器的时候可能也会和 Hyper-V 冲突，所以索性给关掉吧。 检查 VT 状态可以使用 CPU-V 来查看。 找到 控制面板→程序→启用或关闭 Windows 功能，然后关闭 “Hype-V”、“Windows 虚拟机监控程序平台”、“适用于 Linux 的 Windows 子系统” 和 “虚拟机平台” 这几项，然后重启。 这时候再看应该就没有 Hyper-V 选项了，然后右键此电脑→管理→服务和应用程序→服务，往下翻，将如图所示有 Hyper-V 字样的服务全部禁用。 如果效果还是不好，可以打开 PoweShell 执行 shell bcdedit /set hypervisorlaunchtype off 还是不行的话就使用 bat 脚本强制卸载掉 bat Dism /online /disable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL pushd \u0026quot;%~dp0\u0026quot; dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum \u0026gt;hyper-v.txt for /f %%i in (\u0026#39;findstr /i . hyper-v.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /remove-package:\u0026quot;%SystemRoot%\\servicing\\Packages\\%%i\u0026quot; del hyper-v.txt ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:2:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#关闭-hyper-v"},{"categories":["计算机"],"content":" 后记关闭 Hyper-V 后，我下载了最新的 VM 进行重装，目前现在一切正常，感觉不到卡顿了，另外我又下载了一个 Debian 的镜像给装到了 VM 里面，并且安装了 Docker 和 Portainer，使用上也没什么问题，暂时就先这样。 如果效果再不好我还打算下个 VirtualBox 来试试的，目前看来是用不上了。 ","date":"2025-07-20","objectID":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/:3:0","series":null,"tags":["Windows","虚拟机"],"title":"Win11使用虚拟机遇到的一些问题","uri":"/win11%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/#后记"},{"categories":null,"content":" 感觉自己萌萌哒 收集一些自己常用的资源站，不在多而在于精，理想条件下是一个网站解决所有需求，再加几个备用。 并不想做成一个导航。 关于学习资源，奈何囊中羞涩，一些软件的定价过于离谱，基本都转向了订阅制，用学习版也是迫不得已。 根据目前的体验，MacOS 的资源是最简单获取的，Windows 是最难的，一些热门软件 DMCA 太严重了（俄罗斯的网站相对宽松），例如 Navicat、IDM，Android 的资源还可以，iOS 没啥必要，自签也只能解决一小部分。 小提示 本页面可能会包含一些具体的软件和服务，但是主要以综合的资源站为主； 博主自用的软件整理请移步 我的软件清单\u0026军火库，这个系列也会包含一些穷鬼开发者【指可免费使用】开发调试用到的一些可爱的环境提供服务商。 同样缓慢整理中… (•̀ᴗ•́)و ̑̑ 缓慢整理中 也许会忘记也说不定呢. ","date":"2025-07-20","objectID":"/resources/:0:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#"},{"categories":null,"content":" Windows/综合 4 分贝 🎉 可以说是 423 down 完美替代 佛系软件 Adobe 源头 下载安装推荐使用 Adobe Downloader 或者还可以看看 GenP 这个项目 cybermania filecr 特殊的一些软件，NavicatPremium 参考这篇大佬的博客； Jetbrains 全家桶优先使用 IPFS，或者使用热心网友制作的 jetbra-free，带 Web GUI 可破插件（插件不成功可使用 plugin-privacy 解决），架设服务器参考这个频道；懒人的福音，一键脚本：irm ckey.run/debug|iex 无论哪一种，源头貌似都是来源始皇的 ja-netfilter，不得不说 NB。 IDM 可以跟随这个发布网站进行更新。 ","date":"2025-07-20","objectID":"/resources/:1:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#windows综合"},{"categories":null,"content":" MacOS MacKed 🎉 秋佬的 CoreInject 🎉 appstorrent torrentmac ","date":"2025-07-20","objectID":"/resources/:2:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#macos"},{"categories":null,"content":" 移动端特别推荐，X 优化版 piko，广告跳过 GKD 配合 Shizuku。 ","date":"2025-07-20","objectID":"/resources/:3:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#移动端"},{"categories":null,"content":" AI 相关资源 魔塔社区 ","date":"2025-07-20","objectID":"/resources/:4:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#ai-相关资源"},{"categories":null,"content":" 其他 rutor 俄罗斯，版权 Open 新闻聚合 体验比较好的一个，开源地址 / 在线地址，但是目前体验有点卡顿 ","date":"2025-07-20","objectID":"/resources/:5:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#其他"},{"categories":null,"content":" 免费网盘 钛盘 免费好用的临时文件分享服务 萌盘 Koofr 10G 免费，支持 WebDAV ","date":"2025-07-20","objectID":"/resources/:6:0","series":null,"tags":null,"title":"资源收集","uri":"/resources/#免费网盘"},{"categories":["网络"],"content":"首先说明一点，我认为目前对于小白用户，尤其是机场用户，Clash / Mihomo 仍然是最佳选择，上手简单、分流优秀。只要理解了分流、Tun、FakeIP 使用上不是问题。","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"},{"categories":["网络"],"content":" 提示 截止目前，距离我首次写这篇文章的时候，环境已经发生了比较大的变化，对部分内容进行了重写，原版可以去看旧博客。 由于 clash for windows（CFW） 这个 GUI 的作者退坑，不明真相的吃瓜群众都以为是内核 Clash 跑路了，由于人实在是太多，引起了比较大的影响，这种软件主打就是闷声发大财，动静太大作者可不想被喝茶。 紧接着一系列 Clash 系软件删库或者归档，包括内核 Clash、ClashX、ClashForAndroid、clash-verge、ClashMeta 等等。 目前有一些项目进行了复活，例如 ClashMeta 转生 Mihomo，是个二次开发的内核（为了不再次发生上次的情况，Mihomo 要求下游 GUI 软件名字不得使用 Mihomo）； 目前基于 Mihomo 也有一些不错的项目，例如 Spark、Clash Verge Rev、FlClash、clash nyanpasu、MihomoParty（还未改名，原作者已弃坑，暂不推荐） 首先说明一点，我认为目前对于小白用户，尤其是机场用户，Clash / Mihomo 仍然是最佳选择，上手简单、分流优秀。只要理解了分流、Tun、FakeIP 使用上不是问题。 警告 以我个人的看法，毕竟 Clash 已经没了，Clash 系今后的发展并不明朗，有能力的朋友还是尽量转换到一些新流行的内核项目，例如 Sing-box，但是目前问题比较多，也没有特别成熟的 GUI，我目前当作备用，GUI 的备用可以选择 v2rayN。 Mac 用户有更好的选择，例如 Surge 或者 Loon、Stash 等，囊中羞涩也可以用学习版嘛~ 软路由用户除了 OpenClash 也还有 passwall、homeproxy 可选。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:0:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#"},{"categories":["网络"],"content":" 机场节点最近进行了一场大规模的中转入口打击，并且还没有停止的意思，其中打击方式有很多骚操作，各位自行了解，不确定之后会不会无中转可用，悲。 直连 您的设备直接传输数据到国外的代理服务器，路线图可以表示为 用户 —– 代理服务器 普通中转 从您的设备传输数据到国内的数据中心，再由数据中心发送至国外的代理服务器，线图可以表示为 用户 —– 国内中转机 —— 代理服务器 隧道中转 从您的设备传输数据到国内的数据中心，再由数据中心传输至国外的数据中心，国外的数据中心再将数据发送至代理服务器。 线路图可以表示为 用户 —- 国内中转机 —– 国外中转机 —- 代理服务器 这个应该是目前主流的方式 专线 目前常见的专线有 IPLC 和 IEPL，这种线路一般服务于大型的跨国企业，银行等，特点是延迟低，稳定性高，不受防火墙的审查。缺点是价格特别贵。大部分其实都是噱头，实际并不是。 目前稍微好一些的基本都是全中转，所以很多软件都出了入口、落地节点查询，中转下单靠 TCP 测延迟并没有那么有效果，url-test 才能反应实际连接情况。 所以也就理解为什么中转都是 SS 协议，这个协议抗干扰很弱，但是速度非常快，损耗低，用在中转的环境很合适，甚至可以作为游戏节点，如果你订阅到的协议不是 SS 是 VMess 之类，那大概率就是直连，成本很低。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:1:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#机场节点"},{"categories":["网络"],"content":" 基本配置大部分机场都提供一份默认配置文件，包括一些基本的分流规则，但是我推荐自己写一份，更适合自己。 Mihomo 和 Clash 配置基本通用的，下面 Clash / Mihomo 称呼都基本一样，主文件 Config.yaml 基本内容： yaml port: 1090 socks-port: 1080 allow-lan: false mode: Rule log-level: info external-controller: 127.0.0.1:9090 secret: 'o4UJC!kwdjainfuaenf' dns: tun: proxies: proxy-groups: proxy-providers: rule-providers: rules: - DOMAIN-SUFFIX,google.com,DIRECT - DOMAIN-KEYWORD,google,DIRECT - DOMAIN,google.com,DIRECT - DOMAIN-SUFFIX,ad.com,REJECT - GEOIP,CN,DIRECT - MATCH,DIRECT 这里特别注意一点，对外控制 API 接口如果用不到就别开，开也设置个复杂密码。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:2:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#基本配置"},{"categories":["网络"],"content":" DNS这部分的功能非常实用，虽然最开始我完全看不懂，也不知道什么意思，在这里的配置也让我踩坑了好几次，首先来看一个示例配置： DNS相关配置 # DNS 服务器配置(可选；若不配置，程序内置的 DNS 服务会被关闭) dns: enable: true listen: 0.0.0.0:53 ipv6: true # 当此选项为 false 时, AAAA 请求将返回空 # 以下填写的 DNS 服务器将会被用来解析 DNS 服务的域名 # 仅填写 DNS 服务器的 IP 地址 default-nameserver: - 223.5.5.5 - 119.29.29.29 - 114.114.114.114 enhanced-mode: fake-ip # 或 redir-host fake-ip-range: 198.18.0.1/16 # Fake IP 地址池 (CIDR 形式) # use-hosts: true # 查询 hosts 并返回 IP 记录 # 在以下列表的域名将不会被解析为 fake ip，这些域名相关的解析请求将会返回它们真实的 IP 地址 fake-ip-filter: # 以下域名列表参考自 vernesong/OpenClash 项目，并由 Hackl0us 整理补充 # === LAN === - '*.lan' # === Linksys Wireless Router === - '*.linksys.com' - '*.linksyssmartwifi.com' # === Apple Software Update Service === - 'swscan.apple.com' - 'mesu.apple.com' # === Windows 10 Connnect Detection === - '*.msftconnecttest.com' - '*.msftncsi.com' # === NTP Service === - 'time.*.com' - 'time.*.gov' - 'time.*.edu.cn' - 'time.*.apple.com' - 'time1.*.com' - 'time2.*.com' - 'time3.*.com' - 'time4.*.com' - 'time5.*.com' - 'time6.*.com' - 'time7.*.com' - 'ntp.*.com' - 'ntp.*.com' - 'ntp1.*.com' - 'ntp2.*.com' - 'ntp3.*.com' - 'ntp4.*.com' - 'ntp5.*.com' - 'ntp6.*.com' - 'ntp7.*.com' - '*.time.edu.cn' - '*.ntp.org.cn' - '+.pool.ntp.org' - 'time1.cloud.tencent.com' # === Music Service === ## NetEase - '+.music.163.com' - '*.126.net' ## Baidu - 'musicapi.taihe.com' - 'music.taihe.com' ## Kugou - 'songsearch.kugou.com' - 'trackercdn.kugou.com' ## Kuwo - '*.kuwo.cn' ## JOOX - 'api-jooxtt.sanook.com' - 'api.joox.com' - 'joox.com' ## QQ - '+.y.qq.com' - '+.music.tc.qq.com' - 'aqqmusic.tc.qq.com' - '+.stream.qqmusic.qq.com' ## Xiami - '*.xiami.com' ## Migu - '+.music.migu.cn' # === Game Service === ## Nintendo Switch - '+.srv.nintendo.net' ## Sony PlayStation - '+.stun.playstation.net' ## Microsoft Xbox - 'xbox.*.microsoft.com' - '+.xboxlive.com' # === Other === ## QQ Quick Login - 'localhost.ptlogin2.qq.com' ## Golang - 'proxy.golang.org' ## STUN Server - 'stun.*.*' - 'stun.*.*.*' - '+.stun.*.*' - '+.stun.*.*.*' - '+.stun.*.*.*.*' - 'heartbeat.belkin.com' - '*.linksys.com' - '*.linksyssmartwifi.com' - '*.router.asus.com' - 'mesu.apple.com' - 'swscan.apple.com' - 'swquery.apple.com' - 'swdownload.apple.com' - 'swcdn.apple.com' - 'swdist.apple.com' - 'lens.l.google.com' - 'stun.l.google.com' - '+.nflxvideo.net' - '*.square-enix.com' - '*.finalfantasyxiv.com' - '*.ffxiv.com' - '*.mcdn.bilivideo.cn' # 支持 UDP / TCP / DoT / DoH 协议的 DNS 服务，可以指明具体的连接端口号。 # 所有 DNS 请求将会直接发送到服务器，不经过任何代理。 # Clash 会使用最先获得的解析记录回复 DNS 请求 nameserver: - https://doh.pub/dns-query - https://dns.alidns.com/dns-query # 当 fallback 参数被配置时, DNS 请求将同时发送至上方 nameserver 列表和下方 fallback 列表中配置的所有 DNS 服务器. # 当解析得到的 IP 地址的地理位置不是 CN 时，clash 将会选用 fallback 中 DNS 服务器的解析结果。 # fallback: # - https://dns.google/dns-query # 如果使用 nameserver 列表中的服务器解析的 IP 地址在下方列表中的子网中，则它们被认为是无效的， # Clash 会选用 fallback 列表中配置 DNS 服务器解析得到的结果。 # # 当 fallback-filter.geoip 为 true 且 IP 地址的地理位置为 CN 时， # Clash 会选用 nameserver 列表中配置 DNS 服务器解析得到的结果。 # # 当 fallback-filter.geoip 为 false, 如果解析结果不在 fallback-filter.ipcidr 范围内， # Clash 总会选用 nameserver 列表中配置 DNS 服务器解析得到的结果。 # # 采取以上逻辑进行域名解析是为了对抗 DNS 投毒攻击。 # fallback-filter: # geoip: false # ipcidr: # - 240.0.0.0/4 # - 0.0.0.0/32 # domain: # - '+.google.com' # - '+.facebook.com' # - '+.youtube.com' tun: enable: true stack: gvisor # 或 system macOS-auto-route: true macOS-auto-detect-interface: true dns-hijack: - tcp://8.8.8.8:53 - tcp://8.8.4.4:53 clash DNS 请求逻辑： 当访问一个域名时，nameserver 与 fallback 列表内的所有服务器并发请求，得到域名对应的 IP 地址。 clash 将选取 nameserver 列表内，解析最快的结果。 若解析结果中，IP 地址属于国外，那么 clash 将选择 fallback 列表内，解析最快的结果。 因此，在 nameserver 和 fallback 内都放置无污染、解析速度较快的国内 DNS 服务器，以达到最快的解析速度。 但是 fallback 列表内服务器会用在解析境外网站，为了结果绝对无污染，尽量使用支持 DoT/DoH 的服务器。 DNS 配置注意事项： 如果您为了确保 DNS 解析结果无污染，请仅保留列表内以 tls:// 或 https:// 开头的 DNS 服务器，但是通常对于国内域名没有必要。 如果您不在乎可能解析到污染的结果，更加追求速度。请将 nameserver 列表的服务器插入至 fallback 列表内，并移除重复项。 关于 DNS over HTTPS (DoH) 和 DNS over TLS (DoT) 的选择： 对于两项技术双方各执一词，而且会无休止的争论，各有利弊。各位请根据具体需求自行选择，但是配置文件内默认启用 DoT，因为目前国内没有封锁或管制。 DoH: 以 https:// 开头的 D","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:3:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#dns"},{"categories":["网络"],"content":" fake-ip下面补充说明下这个 fake-ip 是什么东西； 虽然 Fake IP 这个概念早在 2001 年就被提出来了，但是到 Clash 提供 fake-ip 增强模式以后，依然有很多人对 Fake IP 这个概念以及其作用知之甚少。 参考：https://blog.skk.moe/post/what-happend-to-dns-in-proxy/ 当 TCP 连接建立时，Clash DNS 会直接返回一个保留地址的 IP（即 Fake IP；Clash 默认使用 198.18.0.0/16），同时 Clash 继续解析域名规则和 IP 规则。 PS：开启增强模式后可以尝试 nslookup 看一下解析情况。 由于 TCP/IP 的协议特性，在应用发起 TCP 连接时，会先发出一个 DNS question（发一个 IP Packet），获取要连接的服务器的 IP 地址，然后直接向这个 IP 地址发起连接。 在不使用代理的情况下，DNS 查询流程想必大家很熟悉了，如果使用了代理，直连模式下以使用 SOCKS5 代理的浏览器为例： 浏览器不再需要从自己的 DNS 缓存中寻找域名对应的 ip，因为已经有了 SOCKS5 代理，浏览器可以直接将域名封装在 SOCKS5 流量之中发往代理客户端（clash） 代理客户端从 SOCKS5 流量中抽出域名并设法获得解析结果 代理客户端将你的 SOCKS5 流量还原成标准的 TCP 请求 代理客户端将这个 TCP 连接建立起来，TCP 连接可以承载的是 HTTPS 传统上，大部分浏览器等应用都会调用系统的内置方法去解析域名，这时候如果你想做一些魔法操作，那么就是在系统这一层上；你可以在本地或者其他地方搭建一个黑魔法 DNS 服务器，然后设置系统的 DNS 为它，就可以实现一些黑魔法效果。 例如，在上面的 2 和 3 之间，可以插入一步：代理客户端使用 某种协议 将浏览器发出的 SOCKS5 的流量重组并发给远端服务器； 远端服务器使用相同的协议还原，然后拿到域名，进行解析；这样就实现了域名在远端进行解析。 这种就是非直连的方式代理，也就是走转发的部分，可以避免本地 DNS 的污染，但是延迟会高一些，各有优劣，各自体会。 然后再说说分流；分流是一个麻烦事。一般情况下，你可能会需要使用域名进行分流（不论是白名单还是黑名单）。不过更多情况下你会使用到基于 IP 的规则来进行分流。 这里可以通过 GUI 的界面来观察连接，如果 TUN 显示一个域名使用了大量端口占用了大量的 ip 池资源，可以考虑将它放到 fake-ip-filter 中不使用 fake-ip。 在域名规则下，如果判断是直连，那么代理客户端没必要进行 DNS 解析，交给原本的流程使用系统接口即可。 在 ip 规则下，当然需要先解析域名，然后匹配规则，但是由于某些协议可以封装域名，因此最终还是会将域名发给远端，由远端进行解析，也就是你本地匹配规则的 ip 与最终代理请求的 ip 可能并不是一个，也避免了影响 CDN 效果。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:3:1","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#fake-ip"},{"categories":["网络"],"content":" 全局流量代理TUN全局流量代理可能会出现在路由器上或者 TUN/TAP 型的支持全局代理客户端上。用户不再主动为每个应用程序设置代理。此时应用程序是不会感知到代理客户端的存在，它们会正常的发起 TCP 连接，Clash 的增强模式或者说 TUN 模式，会接管设备的 TCP 协议栈，并且由于 TCP/IP 协议在拿到 DNS 解析结果之前，连接是不能建立的。 这时候配合上面说的 DNS 解析过程就比较有趣了，前半部分不变，最终会调用系统接口进行解析域名，这时候会向系统配置的 DNS 服务器发起请求； 如果我们在系统的网络设置之中有设置上游 DNS 地址，例如代理客户端可能会修改系统设置中的 DNS 到 127.0.0.1 或者别的内网 IP、也可能保留用户之前的设置，这无所谓，因为… 操作系统发出的 DNS 解析请求会经过代理客户端并最终被截获；这其实就是配置中的 dns-hijack，截获配置的 DNS 服务器的请求。 代理客户端可以将这个解析请求原样发出去、或者用自己的黑魔法，总之都会拿到一个解析结果； 代理客户端将这个解析结果（下面说的 FakeIP 就是返回一个假的内网 IP）返回回去，操作系统拿到了这个解析结果并返回给浏览器 浏览器对这个解析结果的 IP 建立一个 TCP 连接并发送出去，这个 TCP 连接被代理客户端截获。 由于之前代理客户端进行的 DNS 解析请求这一动作，代理客户端可以找到这个只包含目标 IP 的 TCP 连接原来的目标域名； 如果是支持 redir 的代理客户端，那么代理客户端就会直接将域名和 TCP 连接中的其它数据封装成 某种魔法协议 发给远端服务器；或者封装成 SOCKS5 后交给支持 SOCKS5 的代理客户端。 和应用程序直接将流量封装成 SOCKS5 大有不同，在类似于透明代理的环境下浏览器和其它应用程序是正常地发起 TCP 连接。因此除非得到一个 DNS 解析结果，否则 TCP 连接不会建立；代理客户端也会需要通过这个 DNS 查询动作，才能找到之后的 TCP 连接的域名。 你大概能够发现，浏览器、应用程序直接设置 SOCKS5 代理的话，可以不在代理客户端发起 DNS 解析请求就能将流量发送给远端服务器； 而在透明代理模式下，不论是否需要 IP 规则分流都需要先进行一次 DNS 解析才能建立连接。 有没有办法能像直接设置 SOCKS5 代理一样省掉一次 DNS 解析呢？ 有，就是代理客户端自己不先执行查询动作，丢一个 Fake IP 回去让浏览器、应用程序立刻建立 TCP 连接。 有了 Fake IP，代理客户端无需进行 DNS 解析。最后不论是浏览器、代理客户端还是远端服务器都不会去和 Fake IP 进行连接，因为在代理客户端这里就已经完成了截获、重新封装。 即使按照域名规则分流，代理客户端都没有进行 DNS 解析的需要。只有在遇到了按照 IP 进行分流的规则时，代理客户端才需要进行一次解析拿到一个 IP 用于判断。即便如此，这个 IP 只用于分流规则的匹配，不会被用于实际的连接。 PS：Clash 的增强模式既有 redir-host 也有 Fake IP，目前流行的是 Fake IP 模式。 这里有个很有意思的问题，如果操作系统或者浏览器缓存了 Fake IP，但是代理客户端中 Fake IP 和域名的映射表丢失以后，会出现什么状况？可能会出现什么错误信息？ 你应该大概意识到 Clash 在 Fake IP 模式下偶发的无法上网的原因了。 在使用 Fake-ip 模式后，Application 拿到的是 Clash DNS 返回的 Fake IP，所以也不会出现某些应用程序拒绝连接一些 IP 的情况；和 redir-host 模式一样，在大部分情况下 fake-ip 模式下也可以完全无视 DNS 污染。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:3:2","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#全局流量代理tun"},{"categories":["网络"],"content":" 节点这部分可参考 SS-Rule，写的很好，或者可以看看官方推荐的文档或者 wiki，基本是给自建的人用的，订阅的方式是机场维护。 需要注意的是，在 v1.9 版本后，作者调整了配置的格式（改动很小），下面使用的是最新的个数，详情可以看官方的说明。 节点 proxies 配置 proxies: # shadowsocks # 支持加密方式： # aes-128-gcm aes-192-gcm aes-256-gcm # aes-128-cfb aes-192-cfb aes-256-cfb # aes-128-ctr aes-192-ctr aes-256-ctr # rc4-md5 chacha20 chacha20-ietf xchacha20 # chacha20-ietf-poly1305 xchacha20-ietf-poly1305 - name: \"ss1\" type: ss server: server port: 443 cipher: chacha20-ietf-poly1305 password: \"password\" # udp: true # vmess # 支持加密方式：auto / aes-128-gcm / chacha20-poly1305 / none - name: \"vmess\" type: vmess server: server port: 443 uuid: uuid alterId: 32 cipher: auto # udp: true # tls: true # skip-cert-verify: true # servername: example.com # 优先级高于 wss host # network: ws # ws-opts: # path: /path # headers: # Host: v2ray.com # max-early-data: 2048 # early-data-header-name: Sec-WebSocket-Protocol - name: \"vmess-http\" type: vmess server: server port: 443 uuid: uuid alterId: 32 cipher: auto # udp: true # network: http # http-opts: # # method: \"GET\" # # path: # # - '/' # # - '/video' # # headers: # # Connection: # # - keep-alive - name: vmess-grpc server: server port: 443 type: vmess uuid: uuid alterId: 32 cipher: auto network: grpc tls: true servername: example.com # skip-cert-verify: true grpc-opts: grpc-service-name: \"example\" # socks5 - name: \"socks\" type: socks5 server: server port: 443 # username: username # password: password # tls: true # skip-cert-verify: true # udp: true # http - name: \"http\" type: http server: server port: 443 # username: username # password: password # tls: true # https # skip-cert-verify: true # Trojan - name: \"trojan\" type: trojan server: server port: 443 - name: \"trojan\" type: trojan server: server port: 443 password: yourpsk # udp: true # sni: example.com # aka server name # alpn: # - h2 # - http/1.1 # skip-cert-verify: true - name: trojan-grpc server: server port: 443 type: trojan password: \"example\" network: grpc sni: example.com # skip-cert-verify: true udp: true grpc-opts: grpc-service-name: \"example\" - name: trojan-ws server: server port: 443 type: trojan password: \"example\" network: ws sni: example.com # skip-cert-verify: true udp: true # ws-opts: # path: /path # headers: # Host: example.com 现在我也不太清楚流行什么协议，Trojan 好像很牛逼，vmess 如果效果还是不理想可以切换试试看，我暂时还没用过。 最流行可能还是 vmess，而订阅模式使用 proxy-providers 来定义，体验更好，使用的时候通过 use 关键字。 订阅配置 proxy-groups: - name: Proxy type: url-test use: - provider1 proxy-providers: provider1: type: http # 使用 url 在线订阅 url: \"url\" interval: 3600 path: ./conf/provider1.yaml health-check: enable: true interval: 600 url: http://cp.cloudflare.com/generate_204 test: type: file # 从文件中读取 path: /test.yaml # 可以使用正则来过滤节点 filter: '(香港|台湾|美国).*' health-check: enable: true interval: 36000 url: http://www.gstatic.com/generate_204 使用 proxy-providers 省去了我们自己维护 proxy 节点，直接从在线或者本地文件读取 proxy 节点信息，其他规则还是我们自己定义，顺便提一嘴，如果你没机场只是偶尔临时用，可以看看 proxypool 这个项目，从互联网爬取免费的节点，还有好心人提供了 proxy-providers 的在线地址，可以临时顶一顶，不过毕竟免费风险还是有的，这个自己取舍。 订阅模式需要注意的是拉取的不一定只有节点，包括代理组、规则集可能都有，这样就可能面临一个问题，如果你使用远程订阅，你自定义的一些规则等配置在下一次更新订阅后可能会丢失； 所以自定义配置部分，节点使用 proxy-providers 是一个很不错的解决方案，我目前就是使用的这种方式来订阅多个机场，并且统一使用我自定义的配置，或者也可以尝试使用 Parser 规则解决。 如果你的机场不提供 clash 订阅连接，可以使用在线服务进行转换，这个一搜一大堆不多说，找个靠谱点的就像，或者自建。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:4:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#节点"},{"categories":["网络"],"content":" 代理组这部分也很重要，配合上门的节点分组，避免一个节点挂掉还得手动换，选择最佳的节点连接。 yaml proxy-groups: # 代理的转发链, 在 proxies 中不应该包含 relay. 不支持 UDP. # 流量: clash \u003c-\u003e http \u003c-\u003e vmess \u003c-\u003e ss1 \u003c-\u003e ss2 \u003c-\u003e 互联网 - name: \"relay\" type: relay proxies: - http - vmess - ss1 - ss2 # url-test 可以自动选择与指定 URL 测速后，延迟最短的服务器 - name: \"auto\" type: url-test proxies: - ss1 url: 'http://www.gstatic.com/generate_204' interval: 300 - name: \"auto\" type: url-test # 使用订阅节点 use: - provider1 tolerance: 300 # fallback 可以尽量按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器 - name: \"fallback-auto\" type: fallback proxies: - ss1 url: 'http://cp.cloudflare.com/generate_204' interval: 300 # load-balance 可以使相同 eTLD 请求在同一条代理线路上 - name: \"load-balance\" type: load-balance proxies: - vmess1 url: 'http://www.youtube.com/generate_204' interval: 300 # select 用来允许用户手动选择 代理服务器 或 服务器组 # 您也可以使用 RESTful API 去切换服务器，这种方式推荐在 GUI 中使用 - name: Proxy type: select proxies: - ss1 - ss2 - vmess1 - auto 这里注意 Proxy 这个关键组，GUI 默认使用这个（其实是后面的规则配的是这个），它的类型是 select 可以允许我们在 GUI 中手动选择一个节点或者组，默认我使用 auto，也就是 url-test 模式的。 如果你在配置文件中设置了 tolerance，Clash 将会计算所有代理服务器的延迟时间，然后以最快的代理服务器的延迟时间为基准，根据 tolerance 的值来筛选其他的代理服务器。只有当一个代理服务器的延迟时间小于基准延迟时间加上 tolerance 时，它才会被选择作为请求的代理服务器，换句话说就是只要在这个范围就不会自动切换，以避免频繁切换带来的体验差。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:5:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#代理组"},{"categories":["网络"],"content":" 规则集简单说就是一组规则的集合，只不过可以在线获取，定时更新，也就是可以直接用别人写好的分流规则，非常爽啊，这里我用过好多，最终选择了 Sukka 大佬的，感觉数量不多，但是够用，很精简。 规则集订阅 rule-providers: reject_non_ip_drop: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/reject-drop.txt path: ./ruleset/reject_non_ip_drop.txt reject_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/reject.txt path: ./ruleset/reject_non_ip.txt reject_domainset: type: http behavior: domain format: text interval: 43200 url: https://ruleset.skk.moe/Clash/domainset/reject.txt path: ./ruleset/reject_domainset.txt reject_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/ip/reject.txt path: ./ruleset/reject_ip.txt sogouinput: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/sogouinput.txt path: ./ruleset/sogouinput.txt stream_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/stream.txt path: ./ruleset/stream_non_ip.txt stream_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/ip/stream.txt path: ./ruleset/stream_ip.txt ai_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/ai.txt path: ./ruleset/ai_non_ip.txt telegram_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/telegram.txt path: ./ruleset/telegram_non_ip.txt telegram_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/ip/telegram.txt path: ./ruleset/telegram_ip.txt apple_cdn: type: http behavior: domain format: text interval: 43200 url: https://ruleset.skk.moe/Clash/domainset/apple_cdn.txt path: ./ruleset/apple_cdn.txt apple_services: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/apple_services.txt path: ./ruleset/apple_services.txt apple_cn_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/apple_cn.txt path: ./ruleset/apple_cn_non_ip.txt lan_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/lan.txt path: ./ruleset/lan_non_ip.txt lan_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/ip/lan.txt path: ./ruleset/lan_ip.txt domestic_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/domestic.txt path: ./ruleset/domestic_non_ip.txt direct_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/direct.txt path: ./ruleset/direct_non_ip.txt global_non_ip: type: http behavior: classical format: text interval: 43200 url: https://ruleset.skk.moe/Clash/non_ip/global.txt path: ./ruleset/global_non_ip.txt domestic_ip: type: http behavior: classical format: text interval: 43200 url: 'https://ruleset.skk.moe/Clash/ip/domestic.txt' path: ./ruleset/domestic_ip.txt spotify: type: http behavior: classical interval: 43200 url: 'https://ghp.ci/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.yaml' path: ./ruleset/Spotify.yaml speedtest: type: http behavior: classical interval: 43200 url: https://ghp.ci/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Speedtest/Speedtest.yaml path: ./ruleset/Speedtest.yaml 然后配置下最终规则，整个配置就算完成了： 最终规则 rules: # 自定义规则 示例 - DOMAIN-SUFFIX,todesk.com,DIRECT # ---内置规则集--- # \u003e Safari 防跳转 - DOMAIN,app-site-association.cdn-apple.com,REJECT # ban UDP on Youtube - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(NOT,((GEOSITE,cn))),REJECT # ban National Anti-fraud Center - DOMAIN,prpr.96110.cn.com,DIRECT - DOMAIN-KEYWORD,96110,REJECT - DOMAIN-SUFFIX,gjfzpt.cn,REJECT # \u003e 🆕 拒绝国家反诈中心请求 - DOMAIN-SUFFIX,gjf","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:6:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#规则集"},{"categories":["网络"],"content":" 脚本同样，这也是 Pro 的专有功能，除了全局、直连、规则，还增加了一个更灵活的脚本模式，来应对日益增多的 Rule 规则。但是目前用的人很少，我也没这个需求，暂不关注。 如果有更个性化的节点处理需求，可以尝试使用 parsers。 ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:7:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#脚本"},{"categories":["网络"],"content":" 参考规则这里推荐几个开箱即用的规则： Profiles clash-rules SS-Rule-Snippet GeoIP2-CN ","date":"2021-06-23","objectID":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/:8:0","series":null,"tags":["Clash","Mihomo","Tools"],"title":"Mihomo使用入门","uri":"/mihomo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#参考规则"},{"categories":null,"content":"这里记录的主要是我个人的笔记，因为记忆力不是很好 Orz~~； • 爱音乐，爱动漫，爱折腾，爱技术，爱数码，爱科幻 • 希望早日成为大牛。 • 喜欢宅，怕生，克服中… • 二刺螈 Lolicon（三次元熊孩子走开） 新年愿望：过目不忘，不出 bug，系统不崩… 学习历程： 折腾 Android（一年，果然不擅长前端布局） 折腾 Py、PHP、JS/TS、Go、Linux 等等大杂烩 期间把能知道的技术看了个遍…..额，是简单入门 主攻 Java Web 生态至今（其实就是 Spring 生态、微服务、架构摸索中、DevOps 摸索中） 个人对 JS/ES6 评价很高（学不动了，只能到 ES6 了），对 Vue、React、小程序等生态感兴趣 想要深度学习 Py，对深度学习、LLM/AIGC 之类感兴趣，对图片模式识别和生成尤其感兴趣 慢慢地个人时间越来越少，现在也就折腾下 PVE、Homelab、K3S、NAS，要警惕电子阳痿 总想搞个大新闻 ( ˘•ω•˘ ) ","date":"0001-01-01","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于我","uri":"/about/#"}]